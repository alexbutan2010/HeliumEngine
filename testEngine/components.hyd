// Hydrogen Framework Components

// Counter Component
component Counter {
    state count = 0;
    
    template {
        <div class="counter-container">
            <button @click="decrement">-</button>
            <span class="count">{{ count }}</span>
            <button @click="increment">+</button>
        </div>
    }
    
    method increment() {
        this.count++;
    }
    
    method decrement() {
        if (this.count > 0) {
            this.count--;
        }
    }
}

// Todo List Component
component TodoList {
    state todos = [];
    state newTodo = "";
    
    template {
        <div>
            <form @submit.prevent="addTodo">
                <input v-model="newTodo" placeholder="Add new task">
                <button type="submit">Add</button>
            </form>
            <ul class="todo-list">
                <li v-for="(todo, index) in todos" :key="index">
                    <span>{{ todo }}</span>
                    <button @click="removeTodo(index)" class="delete-todo">Delete</button>
                </li>
            </ul>
        </div>
    }
    
    method addTodo() {
        if (this.newTodo.trim()) {
            this.todos.push(this.newTodo.trim());
            this.newTodo = "";
        }
    }
    
    method removeTodo(index) {
        this.todos.splice(index, 1);
    }
}

// Accordion Component
component Accordion {
    state activeIndex = -1;
    
    template {
        <div class="accordion">
            <div class="accordion-item" v-for="(item, index) in items" :key="index">
                <button 
                    class="accordion-header"
                    @click="toggle(index)"
                >
                    {{ item.title }}
                </button>
                <div 
                    class="accordion-content"
                    :style="{ display: activeIndex === index ? 'block' : 'none' }"
                >
                    {{ item.content }}
                </div>
            </div>
        </div>
    }
    
    method toggle(index) {
        this.activeIndex = this.activeIndex === index ? -1 : index;
    }
    
    data items = [
        { title: "Section 1", content: "Content for section 1" },
        { title: "Section 2", content: "Content for section 2" },
        { title: "Section 3", content: "Content for section 3" }
    ];
}

// Modal Component
component Modal {
    state isOpen = false;
    
    template {
        <div>
            <button @click="open">Open Modal</button>
            <div class="modal" v-if="isOpen">
                <div class="modal-content">
                    <span class="close-modal" @click="close">&times;</span>
                    <h2>{{ title }}</h2>
                    <p>{{ content }}</p>
                </div>
            </div>
        </div>
    }
    
    method open() {
        this.isOpen = true;
    }
    
    method close() {
        this.isOpen = false;
    }
    
    data title = "Modal Title";
    data content = "This is a modal dialog box.";
}

// Form Component
component Form {
    state formData = {
        name: "",
        email: "",
        message: ""
    };
    
    template {
        <form @submit.prevent="submit">
            <div class="form-group">
                <label>Name:</label>
                <input v-model="formData.name" type="text">
            </div>
            <div class="form-group">
                <label>Email:</label>
                <input v-model="formData.email" type="email">
            </div>
            <div class="form-group">
                <label>Message:</label>
                <textarea v-model="formData.message"></textarea>
            </div>
            <button type="submit">Submit</button>
        </form>
    }
    
    method submit() {
        console.log("Form submitted:", this.formData);
        // Emit event with form data
        this.$emit("submit", this.formData);
    }
}

// Animation Component
component Animation {
    state isActive = false;
    
    template {
        <div>
            <div 
                class="animation-box"
                :class="{ active: isActive }"
            >
                Animate Me
            </div>
            <button @click="toggleAnimation">
                {{ isActive ? "Stop" : "Start" }} Animation
            </button>
        </div>
    }
    
    method toggleAnimation() {
        this.isActive = !this.isActive;
    }
}

// DOM Manipulation Component
component DomManipulation {
    state text = "Original Text";
    state hasHighlight = false;
    
    template {
        <div class="dom-test">
            <p :class="{ highlight: hasHighlight }">{{ text }}</p>
            <button @click="changeText">Change Text</button>
            <button @click="toggleHighlight">Toggle Highlight</button>
        </div>
    }
    
    method changeText() {
        this.text = "Text Changed!";
    }
    
    method toggleHighlight() {
        this.hasHighlight = !this.hasHighlight;
    }
}

// Event Handling Component
component EventHandling {
    state output = "";
    state inputValue = "";
    
    template {
        <div class="event-test">
            <button @click="handleClick">Click Me</button>
            <input 
                v-model="inputValue"
                @input="handleInput"
                placeholder="Type something"
            >
            <div id="event-output">{{ output }}</div>
        </div>
    }
    
    method handleClick() {
        this.output = "Button clicked!";
    }
    
    method handleInput() {
        this.output = `Typed: ${this.inputValue}`;
    }
}

// Dynamic Content Component
component DynamicContent {
    state items = [];
    
    template {
        <div class="dynamic-content">
            <button @click="addItem">Add Content</button>
            <button @click="removeItem">Remove Content</button>
            <div id="content-container">
                <div 
                    v-for="(item, index) in items" 
                    :key="index"
                    class="dynamic-item"
                >
                    {{ item }}
                </div>
            </div>
        </div>
    }
    
    method addItem() {
        this.items.push(`Item ${this.items.length + 1}`);
    }
    
    method removeItem() {
        if (this.items.length > 0) {
            this.items.pop();
        }
    }
}

// Initialize Hydrogen Runtime
init {
    // Register components
    registerComponent("counter", Counter);
    registerComponent("todo-list", TodoList);
    registerComponent("accordion", Accordion);
    registerComponent("modal", Modal);
    registerComponent("form", Form);
    registerComponent("animation", Animation);
    registerComponent("dom-manipulation", DomManipulation);
    registerComponent("event-handling", EventHandling);
    registerComponent("dynamic-content", DynamicContent);
    
    // Mount components
    mount("#counter", Counter);
    mount("#todo-list", TodoList);
    mount("#accordion", Accordion);
    mount("#modal", Modal);
    mount("#form", Form);
    mount("#animation", Animation);
    mount("#dom-manipulation", DomManipulation);
    mount("#event-handling", EventHandling);
    mount("#dynamic-content", DynamicContent);
} 